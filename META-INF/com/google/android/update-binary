#!/sbin/sh
##########################################################################################
#
# Unity Installer
# by ahrion & zackptg5
#
##########################################################################################

##########################################################################################
# PREP WORK
##########################################################################################

# DETECT WHETHER IN BOOT MODE
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

# This path should work in any cases
TMPDIR=/dev/tmp
MOUNTPATH=$TMPDIR/magisk_img
$BOOTMODE && IMG=/data/magisk_merge.img || IMG=/data/magisk.img
INSTALLER=$TMPDIR/install
MAGISKBIN=/data/magisk

# DEFAULT PERMISSIONS
umask 022

# INITIAL CLEANUP
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

OUTFD=$2
ZIP=$3

# GET INSTALL/UNINSTALL ACTION FROM ZIP NAME
case $(basename $ZIP) in
  *uninstall*|*Uninstall*|*UNINSTALL*) ACTION=Uninstall;;
  *) ACTION=Install;;
esac

# FUNCTIONS NEEDED BEFORE UTIL_FUNCTIONS IS CALLED
get_outfd() {
  readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
  if [ "$?" -eq "0" ]; then
    OUTFD=0
    for FD in `ls /proc/$$/fd`; do
      readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
      if [ "$?" -eq "0" ]; then
        ps | grep " 3 $FD " | grep -v grep >/dev/null
        if [ "$?" -eq "0" ]; then
          OUTFD=$FD
          break
        fi
      fi
    done
  fi
}

ui_print() {
  $BOOTMODE && echo "$1" || echo -e "ui_print $1\nui_print" >> /proc/self/fd/$OUTFD
}

# GET OUTFD BEFORE ANY UI_PRINT STATEMENTS
get_outfd

# UNZIP FILES
ui_print " "
ui_print "Unzipping files..."
unzip -o "$ZIP" -d $INSTALLER 2>/dev/null

# LOAD UTILITY FUNCTIONS
. $INSTALLER/common/unity-audmodlib/util_functions.sh

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"

# INSERT MODULE INFO INTO CONFIG.SH
for TMP in version name author; do
  NEW=$(grep_prop $TMP $INSTALLER/module.prop)
  test "$TMP" == "author" && NEW="by ${NEW}"
  CHARS=$((${#NEW}-$(echo "$NEW" | tr -cd "©®" | wc -m)))
  SPACES=""
  for i in $(seq $(((41-$CHARS) / 2))); do
    SPACES="${SPACES} "
  done
  test $(((41-$CHARS) % 2)) == 1 && sed -i "s/<$TMP>/$SPACES$NEW${SPACES} /" $INSTALLER/config.sh || sed -i "s/<$TMP>/$SPACES$NEW$SPACES/" $INSTALLER/config.sh
done

. $INSTALLER/config.sh

# PRINT MOD NAME
print_modname

#### MOUNT FILESYSTEM ####
mount_partitions

# DETECT VERSION AND ARCHITECTURE
api_level_arch_detect

# REMOVE COMMENTS FROM USER INPUT FILES AND ADD PROPER VARIABLES
for TMP in $INSTALLER/common/unity-files-wipe.sh $INSTALLER/common/aml-patches.sh $INSTALLER/common/aml-xml-patches.sh $INSTALLER/common/aml-patches-remove.sh $INSTALLER/common/aml-xml-patches-remove.sh $INSTALLER/common/aml-patches-wipe.sh $INSTALLER/common/aml-xml-patches-wipe.sh $INSTALLER/common/unity-uservariables.sh $INSTALLER/common/unity-customrules $INSTALLER/common/post-fs-data.sh $INSTALLER/common/service.sh $INSTALLER/common/*.prop; do
  if [ "$TMP" == "$INSTALLER/common/unity-customrules" ]; then
    NUM=1; while true; do
      if [ -f $TMP$NUM.sh ]; then
        sed -i -e '/^#/ d' -e 's/$SYS\/$VEN/$VEN/g' $TMP$NUM.sh
      else
        NUMOFCUSTRULES=$(($NUM-1))
        break
      fi
      NUM=$((NUM+1))
    done
  else
    if [ -f $TMP ]; then
      sed -i -e '/^#/ d' -e 's/$SYS\/$VEN/$VEN/g' $TMP
    else
      ui_print "   !$TMP missing!"
      abort "   !Copy it back to above and try again!"
    fi
  fi
done

# IMPORT USER VARIABLES
source $INSTALLER/common/unity-uservariables.sh

# CHECK FOR MIN & MAX API VERSION
test -z $MINAPI || { test $API -ge $MINAPI || require_new_api 'minimum'; }
test -z $MAXAPI || { test $API -le $MAXAPI || require_new_api 'maximum'; }

# SET MODID, MODPATH, AMLPATH, and AUDMODLIB variables
test -z $MODID && MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID
AMLPATH=$MOUNTPATH/audmodlib
test -z $AUDMODLIB && AUDMODLIB=$MODID || AUDMODLIB=unity

# PROCESS FOLDERS AND FILES
find $INSTALLER/system -type f -print > $INSTALLER/tfiles
test "$(find $INSTALLER/data -type f -print)" != "$INSTALLER/data/placeholder" && find $INSTALLER/data -type f -print >> $INSTALLER/tfiles
sed -i -e '/addon.d/ d' -e 's/&/\\&/g' -e "s|$INSTALLER||g" $INSTALLER/tfiles
$IS64BIT || sed -i '/lib64/ d' $INSTALLER/tfiles
cp $INSTALLER/tfiles $INSTALLER/tvfiles
sed -i -e '\|/vendor/|d' $INSTALLER/tfiles 
sed -i -e '\|/vendor/|!d' -e "s|/system/vendor||g" $INSTALLER/tvfiles

# MAKE MODID SERVICE AND POST-FS-DATA SCRIPTS
cp -f $INSTALLER/common/unity-audmodlib/modid.sh $INSTALLER/common/unity-audmodlib/$MODID-post-fs-data.sh
mv -f $INSTALLER/common/unity-audmodlib/modid.sh $INSTALLER/common/unity-audmodlib/$MODID-service.sh

# INSERT MODID AND CUSTOM USER SCRIPT INTO MOD SCRIPT
sed -i -e "s/<MODID>/$MODID/" -e "/# CUSTOM USER SCRIPT/ r $INSTALLER/common/post-fs-data.sh" -e '/# CUSTOM USER SCRIPT/d' $INSTALLER/common/unity-audmodlib/$MODID-post-fs-data.sh
sed -i -e "s/<MODID>/$MODID/" -e "/# CUSTOM USER SCRIPT/ r $INSTALLER/common/service.sh" -e '/# CUSTOM USER SCRIPT/d' $INSTALLER/common/unity-audmodlib/$MODID-service.sh

# XMLSTARLET - THANKS TO @JAMES34602 and @LAZERL0RD @XDADEVELOPERS FOR PORTING IT
case $ABILONG in
  arm64*) XML_PRFX=$INSTALLER/common/unity-audmodlib/xmlstarlet/arm64/xmlstarlet; chmod 777 $XML_PRFX;; 
  arm*) XML_PRFX=$INSTALLER/common/unity-audmodlib/xmlstarlet/arm/xmlstarlet; chmod 777 $XML_PRFX;;
  x86*) XML_PRFX=$INSTALLER/common/unity-audmodlib/xmlstarlet/x86/xmlstarlet; chmod 777 $XML_PRFX;;              
  *) ui_print "   ! Only arm, arm64, and x86 devices are compatible for xml patching"; ui_print "   ! XML Patching will be skipped";;
esac

### FILE LOCATIONS ###
# AUDIO EFFECTS
CONFIG_FILE=$SYS/etc/audio_effects.conf
HTC_CONFIG_FILE=$SYS/etc/htc_audio_effects.conf
OTHER_V_FILE=$SYS/etc/audio_effects_vendor.conf
OFFLOAD_CONFIG=$SYS/etc/audio_effects_offload.conf
V_CONFIG_FILE=$VEN/etc/audio_effects.conf
# AUDIO POLICY
A2DP_AUD_POL=$SYS/etc/a2dp_audio_policy_configuration.xml
AUD_POL=$SYS/etc/audio_policy.conf
AUD_POL_CONF=$SYS/etc/audio_policy_configuration.xml
AUD_POL_VOL=$SYS/etc/audio_policy_volumes.xml
SUB_AUD_POL=$SYS/etc/r_submix_audio_policy_configuration.xml
USB_AUD_POL=$SYS/etc/usb_audio_policy_configuration.xml
V_AUD_OUT_POL=$VEN/etc/audio_output_policy.conf
V_AUD_POL=$VEN/etc/audio_policy.conf
# MIXER PATHS
MIX_PATH=$SYS/etc/mixer_paths.xml
MIX_PATH_DTP=$SYS/etc/mixer_paths_dtp.xml
MIX_PATH_i2s=$SYS/etc/mixer_paths_i2s.xml
MIX_PATH_TASH=$SYS/etc/mixer_paths_tasha.xml
STRIGG_MIX_PATH=$SYS/sound_trigger_mixer_paths.xml
STRIGG_MIX_PATH_9330=$SYS/sound_trigger_mixer_paths_wcd9330.xml
V_MIX_PATH=$VEN/etc/mixer_paths.xml

# UNIVERSAL VARIABLES
CP_NBPRFX="cp_ch"
WP_PRFX="wipe_ch"
CONFPROPS="$(dirname $ZIP)/$MODID-conflictingprops.txt"

# MAGISK ONLY VARIABLES
magisk_install() {
  MAGISK=true
  CP_PRFX="cp_ch"
  WPAPP_PRFX="mktouch"
  UNITY="$MODPATH"
  PROPFILE="$MODPATH/system.prop"
  AMLSCRIPT="$AMLPATH/post-fs-data.sh"
  if $BOOTMODE; then
    INFO="/magisk/$MODID/$MODID-files"
    MOD_VER="/magisk/$MODID/module.prop"
	AML_VER="/magisk/audmodlib/module.prop"
  else
    INFO="$MODPATH/$MODID-files"
    MOD_VER="$MODPATH/module.prop"
	AML_VER="$AMLPATH/module.prop"
  fi
}

# SYSTEM ONLY VARIABLES
system_install() {
  MAGISK=false
  CP_PRFX="sys_cp_ch"
  WPAPP_PRFX="sys_wipe_ch"
  UNITY=""
  AMLPATH=""
  PROPFILE="$SH/$MODID-props"
  AMLSCRIPT="$SH/audmodlib-post-fs-data"
  MOD_VER="$SYS/etc/$MODID-module.prop"
  AML_VER="$SYS/etc/audmodlib-module.prop"
  if [ -d $SYS/addon.d ]; then
    INFO=$SYS/addon.d/$MODID-files
    AMLINFO=$SYS/addon.d/audmodlib-files
  else
    INFO=$SYS/etc/$MODID-files
    AMLINFO=$SYS/etc/audmodlib-files
  fi
}

# DETERMINE SYSTEM BOOT SCRIPT TYPE
script_install_logic() {
  supersuimg_mount
  SHEBANG="#!/system/bin/sh"
  if [ "$supersuimg" ] || [ -d /su ]; then
    SHEBANG="#!/su/bin/sush"
	SH=/su/su.d
    SEINJECT=/su/bin/supolicy
    ROOTTYPE="systemless SuperSU"
  elif [ -e "$(dirname `find /data /cache -name supersu_is_here | head -n1`)" ]; then
    SHEBANG="#!/su/bin/sush"
	SH=$(dirname `find /data /cache -name supersu_is_here | head -n1`)/su.d
    SEINJECT=$(dirname `find /data /cache -name supersu_is_here | head -n1`)/bin/supolicy
    ROOTTYPE="bindsbin SuperSU"
  elif [ -d $SYS/su ] || [ -f $SYS/xbin/daemonsu ] || [ -f $SYS/xbin/sugote ]; then
    SH=$SYS/su.d
    SEINJECT=$SYS/xbin/supolicy
    ROOTTYPE="system SuperSU"
  elif [ -f $SYS/xbin/su ]; then
    if [ "$(grep "SuperSU" $SYS/xbin/su)" ]; then
      SH=$SYS/su.d
      SEINJECT=$SYS/xbin/supolicy
      ROOTTYPE="system SuperSU"
    else
      SH=$SYS/etc/init.d
      SEINJECT=/sbin/sepolicy-inject
      ROOTTYPE="LineageOS SU"
    fi
  else
    SH=$SYS/etc/init.d
    SEINJECT=/sbin/sepolicy-inject
    ROOTTYPE="other root or rootless"
  fi
}

# UNITY PROP REMOVAL
unity_prop_remove() {
  test "$MAGISK" == true && sed -i -e "s/setprop //g" -e "s/ /=/g" $1
  if [ -f $PROPFILE ]; then
    if [ "$(cat $1)" ]; then
      cat $1 | while read PROP; do
        test "$(grep "$PROP" $PROPFILE)" && sed -i "\|$PROP|d" $PROPFILE
      done
    fi
    test ! -s $PROPFILE -o "$(cat $PROPFILE)" == "$SHEBANG" && rm -f $PROPFILE
	test -f $CONFPROPS && rm -f $CONFPROPS
  fi
}

# UNITY PROP INSTALL
unity_prop_copy() {
  sed -i "/#/d" $1
  if [ "$MAGISK" == true ]; then
    sed -i -e "s/setprop //g" -e "s/ /=/g" $1
	$BOOTMODE && SH=/magisk || SH=$MOUNTPATH
	FILE=system.prop
  else
    FILE="*props"
  fi
  if [ "$(cat $1)" ]; then
    test ! -f $PROPFILE && { test "$MAGISK" == true && mktouch $PROPFILE || mktouch $PROPFILE "$SHEBANG"; }
	for TMP in $(find $SH -type f -name $FILE); do
	  cat $1 | while read PROP; do
        PRESENT=false
        cat $TMP | { 
        while read OLDPROP; do
          test "$PROP" == "$OLDPROP" && PRESENT=true
        done
        if [ "$PRESENT" == false ]; then
		  test ! "$(grep '$PROP' $PROPFILE)" && echo "$PROP" >> $PROPFILE
		elif [ "$TMP" != "$PROPFILE" ]; then
		  test ! -f $CONFPROPS && mktouch $CONFPROPS
		  echo "FOUND IN: $TMP" >> $CONFPROPS
		  echo "- VALUE: $OLDPROP" >> $CONFPROPS
		  echo "- NEW VALUE: $PROP" >> $CONFPROPS
		fi
        }
      done
	done
    test "$MAGISK" == false && { chmod 0700 $PROPFILE; restorecon $PROPFILE; }
	test -f $CONFPROPS && { ui_print "   ! Conflicting props found!"; ui_print "   ! Check the conflicting props file at"; ui_print "   ! location of installer zip for list of them !"; }
  fi
}

# UNITY FILE/FOLDER WIPE
unity_mod_wipe() {
  #### CLEANING UP ####
  ui_print " "
  ui_print "- Cleaning up previous installations -"

  # REMOVE PROPS
  test -s $INSTALLER/common/unity-props-remove.prop && { ui_print "   Removing obsolete props..."; unity_prop_remove $INSTALLER/common/unity-props-remove.prop; }

  # REMOVE FILES
  ui_print "   Removing files..."
  test "$MAGISK" == true && rm -rf $MODPATH 2>/dev/null
  test ! -f "$INFO" && mktouch $INFO

  cat $INSTALLER/common/unity-files-wipe.sh | while read LINE; do
    wipe_ch $LINE
  done

  NUM=1; while [ $NUM -le $NUMOFCUSTRULES ]; do
    test "$(grep "TIMEOFEXEC=1" $INSTALLER/common/unity-customrules$NUM.sh)" && source $INSTALLER/common/unity-customrules$NUM.sh
    NUM=$((NUM+1))
  done
}

# UNITY FILE/FOLDER COPY
unity_mod_copy() {
  #### INSTALL FILES ####
  ui_print " "
  ui_print "- Installing modification -"

  # INSTALL SCRIPTS
  if [ "$MAGISK" == false ]; then                                                 
    ui_print "   Installing scripts for $ROOTTYPE..."
    test "$ROOTTYPE" == "LineageOS SU" -o "$ROOTTYPE" == "other root or rootless" && { ui_print " "; ui_print "   ! This root method has no boot script support !"; ui_print "   ! You will need to add init.d support !"; ui_print " "; }

    # CREATE FILE CONTAINING LIST OF ALL INSTALLED MOD FILES
    test ! -f $AMLINFO && touch $AMLINFO

    # COPY MODULE.PROP FILE FOR VERSION CHECKING
    $CP_NBPRFX $INSTALLER/module.prop $MOD_VER
    add_to_info $MOD_VER $INFO

    # INSTALL POST-FS-DATA MODE SCRIPTS
    if $POSTFSDATA; then
      $CP_NBPRFX $INSTALLER/common/unity-audmodlib/$MODID-post-fs-data.sh $SH/$MODID-post-fs-data 0700
      add_to_info $SH/$MODID-post-fs-data $INFO
      test "$AUDMODLIB" == "$MODID" && patch_script $SH/$MODID-post-fs-data
    fi
    
    # INSTALL SERVICE MODE SCRIPTS
    if $LATESTARTSERVICE; then
      $CP_NBPRFX $INSTALLER/common/unity-audmodlib/$MODID-service.sh $SH/$MODID-service 0700
      add_to_info $SH/$MODID-service $INFO
      test "$AUDMODLIB" == "$MODID" && patch_script $SH/$MODID-service
    fi

    # INSTALL ROM BACKUP SCRIPT
    if [ -d $SYS/addon.d ]; then
      ui_print "   Installing addon.d backup script..."
      
      # INSERT MODID INTO ADDON.D SCRIPT
      sed -i "s/<MODID>/$MODID/" $INSTALLER/system/addon.d/modid.sh

      $CP_NBPRFX $INSTALLER/system/addon.d/modid.sh $SYS/addon.d/$MODID.sh 0755
      $CP_NBPRFX $INSTALLER/system/addon.d/audmodlib.sh $SYS/addon.d/audmodlib.sh 0755
    else
      ui_print "   ! Addon.d not detected. Backup script not installed..."
    fi
  else
    ui_print "   Installing scripts for MagiskSU..."
  fi

  # ADD BUILDPROPS
  test -s $INSTALLER/common/unity-props.prop && { ui_print "   Adding build.props..."; unity_prop_copy $INSTALLER/common/unity-props.prop; }
  test -f "$SH/$AUDMODLIB-props" && add_to_info $SH/$AUDMODLIB-props $AMLINFO
  
  # INSTALL APPS & LIBRARIES
  ui_print "   Installing files for $ARCH SDK $API device..."
  
  cat $INSTALLER/tfiles | while read LINE; do
    $OLDAPP && LINE2=$(echo $LINE | sed 's|/app/.*/|/app/|') || LINE2=$(echo $LINE | sed 's|/app/|/priv-app/|')
    test "$(echo "$LINE" | cut -c 1-6)" == "/data/" && sys_cp_ch $INSTALLER$LINE $LINE || $CP_PRFX $INSTALLER$LINE $UNITY$LINE2
  done
  cat $INSTALLER/tvfiles | while read LINE; do
    $CP_PRFX $INSTALLER/system/vendor$LINE $UNITY$VEN$LINE
  done

  NUM=1; while [ $NUM -le $NUMOFCUSTRULES ]; do
    test "$(grep "TIMEOFEXEC=2" $INSTALLER/common/unity-customrules$NUM.sh)" && source $INSTALLER/common/unity-customrules$NUM.sh
    NUM=$((NUM+1))
  done
  
  # REMOVE INFO FILE IF NOT NEEDED
  test "$MAGISK" == true -a ! -s $INFO && rm -f $INFO
}

# AUDIO MODIFICATION LIBRARY
aml_mod() {
  ### CREATE AUDIO MODIFICATION LIBRARY ###
  test "$ACTION" == "Install" && { ui_print " "; ui_print "- Installing Audio Modification Library -"; } || ui_print "   Removing $MODID from Audio Modification Library"

  for CFG in $CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG $V_CONFIG_FILE $A2DP_AUD_POL $AUD_POL $AUD_POL_CONF $AUD_POL_VOL $SUB_AUD_POL $USB_AUD_POL $V_AUD_OUT_POL $V_AUD_POL $MIX_PATH $MIX_PATH_TASH $STRIGG_MIX_PATH $STRIGG_MIX_PATH_9330 $V_MIX_PATH; do
    if [ -f $CFG ]; then
      test "$MAGISK" == false && { add_to_info $CFG $AMLINFO; add_to_info $CFG.bak $AMLINFO; }
      if [ ! -f $AMLPATH$CFG.bak ]; then
        test -f $CFG.bak && $CP_NBPRFX $CFG.bak $AMLPATH$CFG.bak || $CP_NBPRFX $CFG $AMLPATH$CFG.bak
      fi
      test ! -f $AMLPATH$CFG && $CP_NBPRFX $CFG $AMLPATH$CFG
    fi
  done
  
  if [ ! -z $XML_PRFX ]; then
    if [ "$MAGISK" == true ]; then
      test ! -f $AMLPATH/system/xbin/xmlstarlet && { XML_PATH=$AMLPATH/system/xbin/xmlstarlet; $CP_NBPRFX "$XML_PRFX" "$XML_PATH" 0755; }
    elif [ "${SH%/*}" != "$SYS/etc" ]; then
      test ! -f $AMLPATH${SH%/*}/xbin/xmlstarlet && { XML_PATH=$AMLPATH${SH%/*}/xbin/xmlstarlet; $CP_NBPRFX "$XML_PRFX" "$XML_PATH" 0755; add_to_info $XML_PATH $AMLINFO; }
    else
      test ! -f $AMLPATH$SYS/xbin/xmlstarlet && { XML_PATH=$AMLPATH$SYS/xbin/xmlstarlet; $CP_NBPRFX "$XML_PRFX" "$XML_PATH" 0755; add_to_info $XML_PATH $AMLINFO; }
    fi
  fi
  
  test "$ACTION" == "Install" -a ! -f $AMLSCRIPT && { $CP_NBPRFX $INSTALLER/common/unity-audmodlib/audmodlib-post-fs-data.sh $AMLSCRIPT 0755; patch_script $AMLSCRIPT; }    
  if [ "$MAGISK" == true ]; then
    test "$BOOTMODE" == "true" -a -f /magisk/audmodlib/post-fs-data.sh && $CP_NBPRFX /magisk/audmodlib/post-fs-data.sh $AMLSCRIPT 0755
    test "$BOOTMODE" == "true" -a "$ACTION" == "Uninstall" && { $CP_NBPRFX $INSTALLER/common/unity-audmodlib/audmodlibmodule.prop $AMLPATH/module.prop; mktouch /magisk/audmodlib/update; mktouch $AMLPATH/auto_mount; }
  elif [ "$MAGISK" == false ] && [ "$ACTION" == "Install" ]; then
    add_to_info $AMLSCRIPT $AMLINFO
	patch_script $AMLSCRIPT
    $POSTFSDATA && patch_script $SH/$MODID-post-fs-data
    $LATESTARTSERVICE && patch_script $SH/$MODID-service
  fi
  
  if [ -f $AML_VER ]; then
    if [ "$ACTION" == "Install" ] && [ $(grep_prop versionCode $INSTALLER/common/unity-audmodlib/audmodlibmodule.prop) -gt $(grep_prop versionCode $AML_VER) ]; then
	  ui_print "   ! Old version of AML detected !"
	  ui_print "     Upgrading AML..."
	  ui_print " "
	  sed -i -e '/^# MOD PATCHES/,/^$/!d' -e '/^# MOD PATCHES/d' -e '/^$/d' $AMLSCRIPT
	  sed -i "/^# MOD PATCHES/ r $AMLSCRIPT" $INSTALLER/common/unity-audmodlib/audmodlib-post-fs-data.sh
	  patch_script $INSTALLER/common/unity-audmodlib/audmodlib-post-fs-data.sh
	  $CP_NBPRFX $INSTALLER/common/unity-audmodlib/audmodlib-post-fs-data.sh $AMLSCRIPT
    fi
  fi
  test "$MAGISK" == false -a "$ACTION" == "Install" && { $CP_NBPRFX $INSTALLER/common/unity-audmodlib/audmodlibmodule.prop $AML_VER; add_to_info $AML_VER $AMLINFO; }

  ui_print "   ! AML framework by ahrion & zackptg5 @ XDA !"

  test "$ACTION" == "Install" && aml_mod_patch
  return 0
}

# AML FILE PATCHER
aml_mod_patch() {
  #### PATCHING FILES ####
  ui_print " "
  ui_print "- Patching necessary files -"

  # PATCH AUDMODLIB-SERVICES SCRIPT
  if [ "$MAGISK" == true ]; then
    test "$(grep '<PROPREMOVE>' $AMLPATH/post-fs-data.sh)" && sed -i -e "/<PROPREMOVE>/ r $INSTALLER/common/unity-audmodlib/remove_prop.sh" -e "/<PROPREMOVE>/d" $AMLSCRIPT
    sed -i "/magisk\/$MODID/,/fi #$MODID/d" $AMLSCRIPT
    sed -i 's/^/  /' $INSTALLER/common/aml-patches-remove.sh
    test ! -z $XML_PRFX && sed -i 's/^/  /' $INSTALLER/common/aml-xml-patches-remove.sh;
    sed -i -e "/^# MOD PATCHES/ a\  MODIDS=\"\${MODIDS} $MODID\"" -e "/^# MOD PATCHES/ r $INSTALLER/common/aml-patches-remove.sh" -e "/^# MOD PATCHES/ a\TEMP$MODID" $AMLSCRIPT
    test ! -z $XML_PRFX && sed -i -e "/TEMP$MODID/ r $INSTALLER/common/aml-xml-patches-remove.sh" -e "/TEMP$MODID/ a\fi #$MODID" -e "/TEMP$MODID/d" $AMLSCRIPT || sed -i -e "/TEMP$MODID/ a\fi #$MODID" -e "/TEMP$MODID/d" $AMLSCRIPT
    sed -i "/^# MOD PATCHES/ a\if [ ! -d \"/magisk/$MODID\" ]; then" $AMLSCRIPT
  else
    sed -i "/^# MOD PATCHES/ a\#$MODID" $AMLSCRIPT
  fi

  # REMOVE LIBRARIES & EFFECTS
  ui_print "   Removing library & effect lines..."

  source $INSTALLER/common/aml-patches-wipe.sh
  test ! -z $XML_PRFX && source $INSTALLER/common/aml-xml-patches-wipe.sh
  source $INSTALLER/common/aml-patches-remove.sh
  test ! -z $XML_PRFX && source $INSTALLER/common/aml-xml-patches-remove.sh

  for CFG in $CONFIG_FILE $HTC_CONFIG_FILE $OTHER_V_FILE $OFFLOAD_CONFIG $V_CONFIG_FILE; do
    if [ -f $CFG ]; then
      if [ ! "$(grep ' proxy {' $AMLPATH$CFG)" ]; then
        # ADD LIBRARIES
        sed -i 's/^libraries {/libraries {\n  proxy {\n    path \/system\/lib\/soundfx\/libeffectproxy.so\n  }/g' $AMLPATH$CFG
      fi
    fi
  done

  for CFG in $CONFIG_FILE $V_CONFIG_FILE; do
    if [ -f $CFG ] && [ ! "$(grep '# *output_session_processing' $AMLPATH$CFG)" ] && [ "$(grep '^.*output_session_processing' $AMLPATH$CFG)" ]; then
      sed -i ':a;N;$!ba;s/}\n/}@/g' $AMLPATH$CFG
      sed -i '/^\( *\)output_session_processing {/,/}.*}.*}/ s/^/#/' $AMLPATH$CFG
      sed -i '/^#\( *\)output_session_processing {/,/}.*}.*}/ s/\( *\)}@/#\1}@/2' $AMLPATH$CFG
      sed -i '/^#\( *\)output_session_processing {/,/}.*}.*}/ s/#\( *\)}@#\( *\)}@\(.*\)/#\1}@#\2}@#\3/g' $AMLPATH$CFG
      sed -i ':a;N;$!ba;s/}@/}\n/g' $AMLPATH$CFG
    fi
  done

  source $INSTALLER/common/aml-patches.sh
  test ! -z $XML_PRFX && source $INSTALLER/common/aml-xml-patches.sh

  NUM=1; while [ $NUM -le $NUMOFCUSTRULES ]; do
    test "$(grep "TIMEOFEXEC=3" $INSTALLER/common/unity-customrules$NUM.sh)" && source $INSTALLER/common/unity-customrules$NUM.sh
    NUM=$((NUM+1))
  done
}

# UNITY UNINSTALLER
unity_uninstall() {
  #### CLEANING UP ####
  ui_print " "
  ui_print "- Cleaning up previous installations -"

  # REMOVE PROPS
  test -s $INSTALLER/common/unity-props.prop && { ui_print "   Removing build.props..."; unity_prop_remove $INSTALLER/common/unity-props.prop; }

  # REMOVE FILES
  info_uninstall $INFO
  
  if [ "$AUDMODLIB" != "$MODID" ]; then
    # RESTORE CONFIGS, LIBRARIES, & EFFECTS
    source $INSTALLER/common/aml-patches-remove.sh
    test ! -z $XML_PRFX && source $INSTALLER/common/aml-xml-patches-remove.sh
  fi
  
  if [ "$MAGISK" == true ]; then
    rm -rf $MODPATH
    rm -rf /magisk/$MODID
    test "$AUDMODLIB" != "$MODID" && sed -i "/magisk\/$MODID/,/fi #$MODID/d" $AMLSCRIPT
    # Use magisk_merge for aml during bootmode uninstall
    test "$AUDMODLIB" != "$MODID" && { test "$BOOTMODE" == "true" && aml_mod || ui_print "   Removing $MODID from Audio Modification Library"; }
    # Remove AML if no modules are installed
    test "$AUDMODLIB" != "$MODID" && { test ! "$(sed -n '/^# MOD PATCHES/{n;p}' $AMLPATH/post-fs-data.sh)" && remove_aml; }
  else
    test "$AUDMODLIB" != "$MODID" && sed -i "/#$MODID/d" $AMLSCRIPT
    rm -f $SYS/addon.d/$MODID.sh
    # Remove AML if no modules are installed
    test "$AUDMODLIB" != "$MODID" -a ! "$(sed -n '/^# MOD PATCHES/{n;p}' $AMLSCRIPT)" && remove_aml
  fi

  NUM=1; while [ $NUM -le $NUMOFCUSTRULES ]; do
    test "$(grep "TIMEOFEXEC=4" $INSTALLER/common/unity-customrules$NUM.sh)" && source $INSTALLER/common/unity-customrules$NUM.sh
    NUM=$((NUM+1))
  done
}

# EXTRA MAGISK STUFF
magisk_procedure_extras() {
  # HANDLE REPLACE FOLDERS
  for TARGET in $REPLACE; do
    mktouch $MODPATH$TARGET/.replace
    test "$AUDMODLIB" != "$MODID" && mktouch $AMLPATH$TARGET/.replace
  done

  # AUTO MOUNT
  $AUTOMOUNT && touch $MODPATH/auto_mount
  test "$AUDMODLIB" != "$MODID" && touch $AMLPATH/auto_mount

  # REMOVE OLD AML FILES IF IN BOOTMODE
  test "$BOOTMODE" == "true" -a "$AUDMODLIB" != "$MODID" && { rm -rf /magisk/audmodlib; mkdir -p /magisk/audmodlib; }

  # MODULE INFO
  $CP_NBPRFX $INSTALLER/module.prop $MODPATH/module.prop
  test "$AUDMODLIB" != "$MODID" && $CP_NBPRFX $INSTALLER/common/unity-audmodlib/audmodlibmodule.prop $AMLPATH/module.prop
  if $BOOTMODE; then
    # UPDATE INFO FOR MAGISK MANAGER
    mktouch /magisk/$MODID/update
    test "$AUDMODLIB" != "$MODID" && mktouch /magisk/audmodlib/update
    $CP_NBPRFX $INSTALLER/module.prop /magisk/$MODID/module.prop
    test "$AUDMODLIB" != "$MODID" && $CP_NBPRFX $INSTALLER/common/unity-audmodlib/audmodlibmodule.prop /magisk/audmodlib/module.prop
  fi
  
  # INSTALL POST-FS-DATA MODE SCRIPTS
  $POSTFSDATA && { $CP_NBPRFX $INSTALLER/common/unity-audmodlib/$MODID-post-fs-data.sh $MODPATH/post-fs-data.sh; patch_script $MODPATH/post-fs-data.sh; }

  # SERVICE MODE SCRIPTS
  $LATESTARTSERVICE && { $CP_NBPRFX $INSTALLER/common/unity-audmodlib/$MODID-service.sh $MODPATH/service.sh; patch_script $MODPATH/service.sh; }
}

# MAIN UNITY FUNCTION
standard_procedure() {
  # PREPARE (UN)INSTALL
  test -d $SYS/priv-app && OLDAPP=false || OLDAPP=true

  # DETERMINE IF MOD IS ALREADY INSTALLED. IF SAME VERSION IS INSTALLED, UNINSTALL
  if [ -f "$MOD_VER" ]; then
    if [ $(grep_prop versionCode $MOD_VER) -ge $(grep_prop versionCode $INSTALLER/module.prop) ]; then
      ui_print " "
      ui_print "   ! Current or newer version detected. Uninstalling!"
      UPGRADE=false
    else
      ui_print " "
      ui_print "   ! Older version detected. Removing..."
      UPGRADE=true
    fi
    ACTION=Uninstall
  else
    UPGRADE=false
  fi

  if [ "$ACTION" == "Install" ]; then
    test "$MAGISK" == false && { ui_print " "; ui_print "   ! Magisk is not installed!"; ui_print "    ! Installing on system!"; }

    # WIPE FILES
    unity_mod_wipe
 
    # COPY FILES
    unity_mod_copy

    # PATCH FILES
    test "$AUDMODLIB" != "$MODID" && aml_mod

    test "$MAGISK" == true && magisk_procedure_extras

    # COMPLETING INSTALL
    ui_print " "
    ui_print "- Completing install -"
    ui_print "   Setting permissions..."
    if [ "$MAGISK" == true ]; then
      test "$AUDMODLIB" != "$MODID" && set_perm_recursive $AMLPATH 0 0 0755 0644
      set_permissions
      set_perm_recursive $AMLPATH/system/xbin 0 0 0755 0755
    else
      set_permissions
      ! $BOOTMODE && [ "$supersuimg" -o -d /su ] && umount /su
      action_complete
      exit 0
    fi
  else
    test "$MAGISK" == false && { ui_print " "; ui_print "   ! Magisk is not installed!"; ui_print "    ! Uninstalling on system!"; }

    # UNINSTALL
    unity_uninstall

    if $UPGRADE; then
      ACTION=Install
      ui_print " "
      ui_print  "! Uninstall completed, beginning install !"
      standard_procedure
    else
      # COMPLETING UNINSTALL
      if [ "$MAGISK" == true ]; then
        ui_print " "
        ui_print "- Completing uninstall -"
      else
        ! $BOOTMODE && [ "$supersuimg" -o -d /su ] && umount /su
        action_complete
        exit 0
      fi
    fi
  fi
}

##########################################################################################
# (UN)INSTALL
##########################################################################################

### SYSTEM INSTALL (IF APPLICABLE) ###
if is_mounted /data; then
  if [ ! -d "/data/magisk" ]; then
    script_install_logic
	system_install
    standard_procedure
  fi
elif is_mounted /cache; then
  script_install_logic
  system_install
  standard_procedure
else
  ui_print "! Unable to mount /data and /cache !"
  abort "! If using magisk, flash in magisk manager !"
fi

### MAGISK INSTALL ###

# UTILITY FUNCTIONS MUST EXIST
[ -f $MAGISKBIN/util_functions.sh ] || require_new_magisk
$BOOTMODE && ! is_mounted /magisk && abort "! Magisk is not activated!"

# WE NEED BUSYBOX/BINARIES TO BE SETUP
$BOOTMODE && boot_actions || recovery_actions

# CHECK THE MIN MAGISK VERSION
MAGISK_VER_CODE=`grep_prop MAGISK_VER_CODE $MAGISKBIN/util_functions.sh`
[ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge 1400 ] || require_new_magisk

# MOUNT MAGISK IMG
request_zip_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "   Found $IMG"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    newSizeM=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "    Resizing $IMG to ${newSizeM}M"
    $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
  fi
else
  newSizeM=$((reqSizeM / 32 * 32 + 64));
  ui_print "   Creating $IMG with size ${newSizeM}M"
  $MAGISKBIN/magisk --createimg $IMG $newSizeM
fi

ui_print "    Mounting $IMG to $MOUNTPATH"
MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
is_mounted $MOUNTPATH || abort "     $IMG mount failed..."

# ACTUAL (UN)INSTALL
magisk_install
standard_procedure

# UNMOUNT MAGISK IMG
$MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP
rmdir $MOUNTPATH

# SHRINK THE IMAGE IF POSSIBLE
image_size_check $IMG
newSizeM=$((curUsedM / 32 * 32 + 64))
if [ $curSizeM -gt $newSizeM ]; then
  ui_print "   Shrinking $IMG to ${newSizeM}M"
  $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
fi

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

action_complete

# PLEASE LEAVE THIS MESSAGE IN YOUR FLASHABLE ZIP FOR CREDITS :)
ui_print " "
ui_print "    *******************************************"
ui_print "    *      Powered by Magisk (@topjohnwu)     *"
ui_print "    *******************************************"
ui_print " "

exit 0
