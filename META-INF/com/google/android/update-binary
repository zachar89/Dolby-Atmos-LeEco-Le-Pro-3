#!/sbin/sh

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false

# Default permissions
umask 022

##########################################################################################
# Functions
##########################################################################################

safe_mount() {
  IS_MOUNT=$(cat /proc/mounts | grep "$1")
  if [ "$IS_MOUNT" ]; then
    mount -o rw,remount $1
  else
    mount $1
  fi
}

safe_mount /system

SLOT=$(getprop ro.boot.slot_suffix 2>/tmp/null)
if [ "$SLOT" ]; then
  safe_mount /system/system
  SYSTEM=/system/system
else
  SYSTEM=/system
fi

if [ ! -d "$SYSTEM/vendor" ] || [ -L "$SYSTEM/vendor" ]; then
  safe_mount /vendor
  VENDOR=/vendor
elif [ -d "$SYSTEM/vendor" ] || [ -L "/vendor" ]; then
  safe_mount $SYSTEM/vendor
  VENDOR=$SYSTEM/vendor
fi

suimg=$(ls /cache/su.img /data/su.img 2>/dev/null);

if [ -d $SYSTEM/priv-app ]; then
  APPDIR=priv-app
else
  APPDIR=app
fi

ui_print() {
  if $BOOTMODE; then
    echo "$1"
  else 
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

grep_prop() {
  REGEX="s/^$1=//p"
  shift
  FILES=$@
  if [ -z "$FILES" ]; then
    FILES="$SYSTEM/build.prop"
  fi
  cat $FILES 2>/dev/null | sed -n "$REGEX" | head -n 1
}

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, >/dev/null
  else
    cat /proc/mounts | grep $1 >/dev/null
  fi
  return $?
}

sys_is_mounted() {
  case `mount` in
    *" $1 "*) echo 1;;
    *) echo 0;;
  esac;
}

mount_image() {
  if [ ! -d "$2" ]; then
    mount -o rw,remount rootfs /
    mkdir -p $2 2>/dev/null
    ($BOOTMODE) && mount -o ro,remount rootfs /
    [ ! -d "$2" ] && return 1
  fi
  if (! is_mounted $2); then
    LOOPDEVICE=
    for LOOP in 0 1 2 3 4 5 6 7; do
      if (! is_mounted $2); then
        LOOPDEVICE=/dev/block/loop$LOOP
        if [ ! -f "$LOOPDEVICE" ]; then
          mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
        fi
        losetup $LOOPDEVICE $1
        if [ "$?" -eq "0" ]; then
          mount -t ext4 -o loop $LOOPDEVICE $2
          if (! is_mounted $2); then
            $SYSTEM/bin/toolbox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
          if (! is_mounted $2); then
            $SYSTEM/bin/toybox mount -t ext4 -o loop $LOOPDEVICE $2
          fi
        fi
        if (is_mounted $2); then
          ui_print "    Mounting $1 to $2..."
          break;
        fi
      fi
    done
  fi
}

set_perm() {
  chown $2:$3 $1 || exit 1
  chmod $4 $1 || exit 1
  if [ ! -z "$5" ]; then
    chcon $5 $1 2>/dev/null
  else
    chcon 'u:object_r:system_file:s0' $1 2>/dev/null
  fi
}

set_perm_recursive() {
  find $1 -type d 2>/dev/null | while read dir; do
    set_perm $dir $2 $3 $4 $6
  done
  find $1 -type f 2>/dev/null | while read file; do
    set_perm $file $2 $3 $5 $6
  done
}

sys_mk_ch() { 
  mkdir -p "$1"
  chmod "$2" "$1"
}

sys_cp_ch() {
  cp "$1" "$2"
  chmod "$3" "$2"
}

mktouch() {
  mkdir -p ${1%/*}
  if [ -z "$2" ]; then
    touch $1
  else
    echo $2 > $1
  fi
  chmod 644 $1
}

request_size_check() {
  reqSizeM=`unzip -l "$1" 2>/dev/null | tail -n 1 | awk '{ print $1 }'`
  reqSizeM=$((reqSizeM / 1048576 + 1))
}

image_size_check() {
  e2fsck -yf $1
  curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=`echo "$curBlocks" | cut -d/ -f1`
  curSizeM=`echo "$curBlocks" | cut -d/ -f1`
  curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
  curUsedM=$((curUsedM * 4 / 1024 + 1))
  curSizeM=$((curSizeM * 4 / 1024))
}

##########################################################################################
# Flashable update-binary preparation
##########################################################################################

OUTFD=$2
ZIP=$3

### FILE LOCATIONS ###
# AUDIO EFFECTS
CONFIG_FILE=$SYSTEM/etc/audio_effects.conf
VENDOR_CONFIG=$VENDOR/etc/audio_effects.conf
HTC_CONFIG_FILE=$SYSTEM/etc/htc_audio_effects.conf
OTHER_VENDOR_FILE=$SYSTEM/etc/audio_effects_vendor.conf
OFFLOAD_CONFIG=$SYSTEM/etc/audio_effects_offload.conf
# AUDIO POLICY
AUD_POL=$SYSTEM/etc/audio_policy.conf
AUD_POL_CONF=$SYSTEM/etc/audio_policy_configuration.xml
AUD_OUT_POL=$VENDOR/etc/audio_output_policy.conf
V_AUD_POL=$VENDOR/etc/audio_policy.conf

magisk_install() {
  MAGISK=true
  MK_PRFX="mkdir -p"
  CP_PRFX="cp -af"
  UNIFY="$MODPATH"
  MK_SFFX=""
  CP_SFFX=""
  PATCHINSTALL="$TMPAUDMODLIBDIR"
  PATCH="/cache/magisk/audmodlib"
}

system_install() {
  MAGISK=false
  MK_PRFX="sys_mk_ch"
  CP_PRFX="sys_cp_ch"
  UNIFY=""
  MK_SFFX=" 0755"
  CP_SFFX=" 0644"
  PATCHINSTALL=""
  PATCH=""
}

##########################################################################################
# 
# Instructions:
# 
# 1. This is a Unified installer for both Magisk and System install, so be sure to
#    follow the template provided for "app_install_logic", "system_mod_wipe",
#    & "unified_mod_<xxxx>"
# 2. magisk_audmodlib and files with the audmodlib prefix as such need to remain
#    untouched unless an update has occured, however use unified_mod_patch to remove
#    and then add the lines corresponding to your mod
# 3. If applicable, make "APP1", etc. to be the same name as your .apk/app folder
#    in system/app/ (i.e. APP1=Ax, APP2=ViPER4Android, APP3=AM3DZirene and so on)
# 4. common/$MODID.sh, system/addon.d/99$MODID.sh & system/su.d/50$MODID.sh app specific
#    scripts will be named the same as your MODID in config.sh (i.e. MODID=v4afx so
#    common/$MODID.sh=v4afx.sh)
# 5. Edit common/$MODID.sh to remove or restore the specific audio_effects or
#    audio_policy files that were added in the unified_mod_patch portion of the installer
# 6. You can obviously use your mod specific system.prop or post-fs-data.sh as part of
#    the mod, but make sure not edit the designated audmodlib specific files
# 7. DO NOT delete any of the credits for @ahrion or @topjohnwu mentioned in this script
# 
##########################################################################################

DOLBY="lepro3"
REVISION="1"
VERSION="2.0"

APP1="Ax"
APP2="AxUI"

app_install_logic() {
  ########################################################################################
  # Logic for correct application installation
  ########################################################################################

  #### v INSERT MORE APPS IF MORE EXIST v ####
  if [ "$API" -ge "21" ]; then
    APPTXT="   Installing apps for Lollipop and above..."
    APP1PATH=$APPDIR/$APP1
	APP2PATH=$APPDIR/$APP2
  else
    APPTXT="   Installing apps for Lollipop and below..."
    APP1PATH=$APPDIR
	APP2PATH=$APPDIR
  fi
  #### ^ INSERT MORE APPS IF MORE EXIST ^ ####
}

system_mod_wipe() {
  ########################################################################################
  # Wipe before System install
  ########################################################################################
  
  ########## v DO NOT REMOVE v ##########
  #### CLEANING UP ####
  ui_print " "
  ui_print "- Cleaning up previous installations -"
  ########## ^ DO NOT REMOVE ^ ##########

  #### v INSERT YOUR FILE REMOVALS v ####
  # REMOVE FILES
  ui_print "   Removing files..."
  rm -rf /data/app/com.atmos-1
  rm -rf /data/app/com.atmos-2
  rm -rf /data/app/com.atmos-3
  rm -rf /data/data/com.atmos
  rm -rf /data/app/com.atmos.daxappUI-1
  rm -rf /data/app/com.atmos.daxappUI-2
  rm -rf /data/app/com.atmos.daxappUI-3
  rm -rf /data/data/com.atmos.daxappUI
  rm -rf $SYSTEM/app/$APP1
  rm -rf $SYSTEM/app/$APP2
  rm -rf $SYSTEM/etc/dolby
  rm -rf $SYSTEM/priv-app/$APP1
  rm -rf $SYSTEM/priv-app/$APP2
  rm -f $SYSTEM/addon.d/99$MODID.sh
  rm -f $SYSTEM/app/$APP1.apk
  rm -f $SYSTEM/app/$APP2.apk
  rm -f $SYSTEM/app/$APP1/$APP1.apk
  rm -f $SYSTEM/app/$APP2/$APP2.apk
  rm -f $SYSTEM/etc/dolby/dax-default.xml
  rm -f $SYSTEM/etc/init.d/50$MODID
  rm -f $SYSTEM/etc/init.d/50audiotweaks
  rm -f $SYSTEM/lib/libdlbdapstorage.so
  rm -f $SYSTEM/lib/libhwdaphal.so
  rm -f $SYSTEM/lib/soundfx/libswdax.so
  rm -f $SYSTEM/lib/soundfx/libhwdax.so
  rm -f $SYSTEM/lib64/libhwdaphal.so
  rm -f $SYSTEM/priv-app/$APP1.apk
  rm -f $SYSTEM/priv-app/$APP2.apk
  rm -f $SYSTEM/priv-app/$APP1/$APP1.apk
  rm -f $SYSTEM/priv-app/$APP1/$APP2.apk
  rm -f /su/su.d/50$MODID.sh
  rm -f /su/su.d/50audiotweaks.sh
  rm -f $SYSTEM/su.d/50$MODID.sh
  rm -f $SYSTEM/su.d/50audiotweaks.sh
  #### ^ INSERT YOUR FILE REMOVALS ^ ####
  
  #### v INSERT YOUR REMOVE PATCH v ####
  # REMOVE LIBRARIES & EFFECTS
  ui_print "   Removing library & effect lines..."
  for CFG in $CONFIG_FILE $OFFLOAD_CONFIG $OTHER_VENDOR_FILE $HTC_CONFIG_FILE $VENDOR_CONFIG; do
    if [ -f $CFG ]; then
      # REMOVE EFFECTS
      sed -i 'H;1h;$!d;x; s/[[:blank:]]*dax {[^{}]*\({[^}]*}[^{}]*\)*}[[:blank:]]*\n//g' $CFG
      # REMOVE LIBRARIES
      sed -i '/dax {/,/}/d' $CFG
      sed -i '/dax_sw {/,/}/d' $CFG
      sed -i '/dax_hw {/,/}/d' $CFG
    fi
  done
  #### ^ INSERT YOUR REMOVE PATCH ^ ####

  #### v INSERT YOUR RESTORE AND BACKUP FUNCTIONS v ####
  # REPLACE VENDOR FILE WITH PREVIOUS BACKUP
  if [ -f $VENDOR_CONFIG ] && [ -f $VENDOR_CONFIG.bak ]; then
    # RESTORE BACKED UP CONFIGS
    cp -af $VENDOR_CONFIG.bak $VENDOR_CONFIG
  fi
  
  # BACKUP CONFIGS
  ui_print "   Backing up existing audio_effects cfg files..."
  for BACKUP in $CONFIG_FILE $OFFLOAD_CONFIG $OTHER_VENDOR_FILE $HTC_CONFIG_FILE $VENDOR_CONFIG; do
    if [ -f $BACKUP ]; then
      cp -f $BACKUP $BACKUP.bak
    fi
  done
  #### ^ INSERT YOUR RESTORE AND BACKUP FUNCTIONS ^ ####
}

unified_mod_directory() {
  ########################################################################################
  # Make directories for Unified install
  ########################################################################################
  
  ########## v DO NOT REMOVE v ##########
  #### PREPARE INSTALL ####
  ui_print " "
  ui_print "- Preparing installation -"

  # CREATING DIRECTORIES
  ui_print "   Creating directories..."

  if [ "$MAGISK" = true ]; then
    rm -rf $MODPATH 2>/dev/null
    mkdir -p $MODPATH
  fi
  ########## ^ DO NOT REMOVE ^ ##########

  #### v INSERT YOUR DIRECTORY MAKING v ####
  app_install_logic
  $MK_PRFX $UNIFY$SYSTEM/$APP1PATH$MK_SFFX
  $MK_PRFX $UNIFY$SYSTEM/$APP2PATH$MK_SFFX

  $MK_PRFX $UNIFY$SYSTEM/etc/dolby$MK_SFFX
  $MK_PRFX $UNIFY$SYSTEM/lib/soundfx$MK_SFFX

  if [ -d $SYSTEM/lib64 ]; then
    if [ "$DOLBY" = axon7 ] || [ "$DOLBY" = lemax2 ] || [ "$DOLBY" = lepro3 ]; then
      $MK_PRFX $UNIFY$SYSTEM/lib64$MK_SFFX
    fi
  fi

  if [ "$MAGISK" = false ]; then
    if [ -d $SYSTEM/addon.d ]; then
      sys_mk_ch $SYSTEM/addon.d 0755
    fi

    for CFG in $CONFIG_FILE $VENDOR_CONFIG $HTC_CONFIG_FILE $OTHER_VENDOR_FILE $OFFLOAD_CONFIG; do
      if [ -f $CFG ]; then
        sys_mk_ch ${CFG%/*} 0755
      fi
    done
  fi
  #### ^ INSERT YOUR DIRECTORY MAKING ^ ####
}

unified_mod_copy() {
  ########################################################################################
  # Copy files over for Unified install
  ########################################################################################
  
  ########## v DO NOT REMOVE v ##########
  #### INSTALL FILES ####
  ui_print " "
  ui_print "- Installing apps, libs, & scripts -"
  ########## ^ DO NOT REMOVE ^ ##########
  
  #### v INSERT YOUR FILE INSTALL v ####
  # INSTALL APPS
  ui_print "$APPTXT"
  $CP_PRFX $INSTALLER/system/app/$APP1/$APP1.apk $UNIFY$SYSTEM/$APP1PATH/$APP1.apk$CP_SFFX
  $CP_PRFX $INSTALLER/system/app/$APP2/$APP2.apk $UNIFY$SYSTEM/$APP2PATH/$APP2.apk$CP_SFFX

  # INSTALL LIBRARIES
  ui_print "   Installing libraries..."
  $CP_PRFX $INSTALLER/system/etc/dolby/dax-default.xml $UNIFY$SYSTEM/etc/dolby/dax-default.xml$CP_SFFX
  $CP_PRFX $INSTALLER/system/lib/libdlbdapstorage.so $UNIFY$SYSTEM/lib/libdlbdapstorage.so$CP_SFFX
  $CP_PRFX $INSTALLER/system/lib/soundfx/libswdax.so $UNIFY$SYSTEM/lib/soundfx/libswdax.so$CP_SFFX

  if [ "$DOLBY" = aquax5 ] || [ "$DOLBY" = axon7 ] || [ "$DOLBY" = lemax2 ] || [ "$DOLBY" = lepro3 ]; then
    $CP_PRFX $INSTALLER/system/lib/libhwdaphal.so $UNIFY$SYSTEM/lib/libhwdaphal.so$CP_SFFX
    $CP_PRFX $INSTALLER/system/lib/libstagefright_soft_ddpdec.so $UNIFY$SYSTEM/lib/libstagefright_soft_ddpdec.so$CP_SFFX
  fi

  if [ "$DOLBY" = axon7 ]; then
    $CP_PRFX $INSTALLER/system/lib/soundfx/libhwdax.so $UNIFY$SYSTEM/lib/soundfx/libhwdax.so$CP_SFFX
  fi

  if [ -d $SYSTEM/lib64 ]; then
    if [ "$DOLBY" = axon7 ] || [ "$DOLBY" = lemax2 ] || [ "$DOLBY" = lepro3 ]; then
      $CP_PRFX $INSTALLER/system/lib64/libhwdaphal.so $UNIFY$SYSTEM/lib64/libhwdaphal.so$CP_SFFX
    fi
  fi

  if [ "$MAGISK" = false ]; then
    #INSTALL SCRIPTS
    if [ "$suimg" ] || [ -d /su ] || [ -f $SYSTEM/xbin/daemonsu ] || [ -f $SYSTEM/xbin/su ] || [ -f $SYSTEM/xbin/sugote ] || [ -d $SYSTEM/etc/init.d ]; then
      if [ "$suimg" ] || [ -d /su ]; then
        ui_print "   Installing scripts for systemless SuperSU..."
        EXT=".sh"
        EXTRDIR=/su/su.d
        NEW=/su/bin/supolicy
      elif [ -d $SYSTEM/su ] || [ -f $SYSTEM/xbin/daemonsu ] || [ -f $SYSTEM/xbin/su ] || [ -f $SYSTEM/xbin/sugote ]; then
        ui_print "   Installing scripts for system SuperSU..."
        EXTRDIR=$SYSTEM/su.d
        EXT=".sh"
        NEW=$SYSTEM/xbin/supolicy
      elif [ -d $SYSTEM/etc/init.d ]; then
        ui_print "   Installing scripts for non root..."
        EXT=""
        EXTRDIR=$SYSTEM/etc/init.d
        NEW=$SYSTEM/xbin/supolicy
      fi
    ui_print "    Installing universal audio tweaks script..."
    ui_print "    Installing $MODID specific script..."
    sed -i "s%/system/xbin/supolicy%$NEW%g" $SYSTEM/su.d/50audiotweaks.sh
    sys_mk_ch $EXTRDIR 0755
    sys_cp_ch $INSTALLER/system/su.d/50audiotweaks.sh $EXTRDIR/50audiotweaks$EXT 0644
    sys_cp_ch $INSTALLER/system/su.d/50$MODID.sh $EXTRDIR/50$MODID$EXT 0644
    else
      ui_print "   No script support detected..."
    fi

    # INSTALL ROM BACKUP SCRIPT
    if [ -d $SYSTEM/addon.d ]; then
      ui_print "   Installing addon.d backup script..."
      sys_cp_ch $INSTALLER/system/addon.d/99$MODID.sh $SYSTEM/addon.d/99$MODID.sh 0644
    fi
  fi
  #### ^ INSERT YOUR FILE INSTALL ^ ####
}

magisk_audmodlib() {
  ########################################################################################
  # Audio Modification Library / This is where the magick happens for Magisk
  ########################################################################################

  ########## v DO NOT REMOVE v ##########
  ### CREATE AUDIO MODIFICATION LIBRARY ###
  ui_print " "
  ui_print "- Installing Audio Modification Library -"

  mkdir -p $MOUNTPATH/.core/post-fs-data.d
  cp -af $INSTALLER/common/$MODID.sh $MOUNTPATH/.core/post-fs-data.d/$MODID.sh

  if [ -d /cache/magisk/audmodlib ] && [[ ! -d $AUDMODLIBPATH || ! -d /magisk/audmodlib ]]; then
    rm -rf /cache/magisk/audmodlib
  fi

  if [ ! -d /cache/magisk/audmodlib ] && [[ ! -d $AUDMODLIBPATH || ! -d /magisk/audmodlib ]]; then
    TMPAUDMODLIBDIR=""
  elif [ -d $AUDMODLIBPATH ]; then
    TMPAUDMODLIBDIR=$AUDMODLIBPATH
  elif [ -d /magisk/audmodlib ]; then
    TMPAUDMODLIBDIR=/magisk/audmodlib
  fi
  
  magisk_install

  for CFG in $CONFIG_FILE $VENDOR_CONFIG $HTC_CONFIG_FILE $OTHER_VENDOR_FILE $OFFLOAD_CONFIG $AUD_POL $AUD_POL_CONF $AUD_OUT_POL $V_AUD_POL; do
    if [ -f $CFG ]; then
      mkdir -p /cache/magisk/audmodlib${CFG%/*}
	fi
  done

  for CFG in $AUD_POL $AUD_POL_CONF $AUD_OUT_POL $V_AUD_POL; do
    if [ ! -f $CFG.bak ]; then
      cp -af $CFG /cache/magisk/audmodlib$CFG.bak
    else
	  cp -af $CFG.bak /cache/magisk/audmodlib$CFG.bak
    fi
  done

  for CFG in $CONFIG_FILE $VENDOR_CONFIG $HTC_CONFIG_FILE $OTHER_VENDOR_FILE $OFFLOAD_CONFIG $AUD_POL $AUD_POL_CONF $AUD_OUT_POL $V_AUD_POL; do
    if [ -f $CFG ]; then
      cp -af $TMPAUDMODLIBDIR$CFG /cache/magisk/audmodlib$CFG
	fi
  done

  if [ -f $VENDOR_CONFIG ]; then
    cp -af /cache/magisk/audmodlib$CONFIG_FILE /cache/magisk/audmodlib$VENDOR_CONFIG
  fi
  
  set_perm_recursive  /cache/magisk/audmodlib  0  0  0755  0644

  mkdir -p $AUDMODLIBPATH

  for CFG in $CONFIG_FILE $VENDOR_CONFIG $HTC_CONFIG_FILE $OTHER_VENDOR_FILE $OFFLOAD_CONFIG $AUD_POL $AUD_POL_CONF $AUD_OUT_POL $V_AUD_POL; do
    if [ -f $CFG ]; then
      mkdir -p $AUDMODLIBPATH${CFG%/*}
	fi
  done
  
  cp -af $INSTALLER/common/audmodlibsystem.prop $AUDMODLIBPATH/system.prop
  cp -af $INSTALLER/common/audmodlibmodule.prop $AUDMODLIBPATH/module.prop
  cp -af $INSTALLER/common/audmodlibservice.sh $AUDMODLIBPATH/service.sh

  unified_mod_patch
  
  for CFG in $AUD_POL $AUD_POL_CONF $AUD_OUT_POL $V_AUD_POL; do
    if [ -f $CFG ]; then
      cp -af /cache/magisk/audmodlib$CFG.bak $AUDMODLIBPATH$CFG.bak
	fi
  done
  
  for CFG in $CONFIG_FILE $VENDOR_CONFIG $HTC_CONFIG_FILE $OTHER_VENDOR_FILE $OFFLOAD_CONFIG $AUD_POL $AUD_POL_CONF $AUD_OUT_POL $V_AUD_POL; do
    if [ -f $CFG ]; then
      cp -af /cache/magisk/audmodlib$CFG $AUDMODLIBPATH$CFG
	fi
  done
  
  set_perm_recursive  $AUDMODLIBPATH  0  0  0755  0644

  ui_print "   ! AudModLib framework by ahrion @ XDA !"
  ########## ^ DO NOT REMOVE ^ ##########
}

unified_mod_patch() {
  ########################################################################################
  # Audio Modification Library file patcher for Unified install
  ########################################################################################
  
  ########## v DO NOT REMOVE v ##########
  #### PATCHING FILES ####
  ui_print "   Patching necessary cfg files"
  ########## ^ DO NOT REMOVE ^ ##########

  #### v INSERT YOUR FILE PATCHES v ####
  # REMOVE LIBRARIES & EFFECTS
  ui_print "    Removing library & effect lines..."
  for CFG in $CONFIG_FILE $OFFLOAD_CONFIG $OTHER_VENDOR_FILE $HTC_CONFIG_FILE $VENDOR_CONFIG; do
    if [ -f $CFG ]; then
      # REMOVE EFFECTS
      sed -i 'H;1h;$!d;x; s/[[:blank:]]*dax {[^{}]*\({[^}]*}[^{}]*\)*}[[:blank:]]*\n//g' $PATCH$CFG
      # REMOVE LIBRARIES
      sed -i '/dax {/,/}/d' $PATCH$CFG
      sed -i '/dax_sw {/,/}/d' $PATCH$CFG
      sed -i '/dax_hw {/,/}/d' $PATCH$CFG
    fi
  done

  # ADD LIBRARIES & EFFECTS
  ui_print "    Patching existing audio_effects files..."
  if [ "$DOLBY" = a7000-6.5 ] || [ "$DOLBY" = aquax5 ] || [ "$DOLBY" = lemax2 ] || [ "$DOLBY" = lepro3 ]; then
    for CFG in $CONFIG_FILE $OFFLOAD_CONFIG $OTHER_VENDOR_FILE $HTC_CONFIG_FILE $VENDOR_CONFIG; do
      if [ -f $CFG ]; then
	    # ADD EFFECTS
        sed -i 's/^effects {/effects {\n  dax {\n    library dax\n    uuid 9d4921da-8225-4f29-aefa-6e6f69726861\n  }/g' $PATCH$CFG
        # ADD LIBRARIES
        sed -i 's/^libraries {/libraries {\n  dax {\n    path \/system\/lib\/soundfx\/libswdax.so\n  }/g' $PATCH$CFG
      fi
    done
  fi

  if [ "$DOLBY" = axon7 ]; then
  ui_print "    Patching existing audio_effects files..."
    for CFG in $CONFIG_FILE $OFFLOAD_CONFIG $OTHER_VENDOR_FILE $HTC_CONFIG_FILE $VENDOR_CONFIG; do
      if [ -f $CFG ]; then
        # ADD EFFECTS
        sed -i 's/^effects {/effects {\n  dax {\n    library proxy\n    uuid 9d4921da-8225-4f29-aefa-6e6f69726861\n\n    libsw {\n      library dax_sw\n      uuid 6ab06da4-c516-4611-8166-6168726e6f69\n    }\n\n    libhw {\n      library dax_hw\n      uuid a0c30891-8246-4aef-b8ad-696f6e726861\n    }\n  }/g' $PATCH$CFG
        # ADD LIBRARIES
        sed -i 's/^libraries {/libraries {\n  dax_sw {\n    path \/system\/lib\/soundfx\/libswdax.so\n  }/g' $PATCH$CFG
        sed -i 's/^libraries {/libraries {\n  dax_hw {\n    path \/system\/lib\/soundfx\/libhwdax.so\n  }/g' $PATCH$CFG
      fi
    done
  fi

  if [ "$MAGISK" = false ]; then
    # COPY OVER MAIN AUDIO_EFFECTS CFG FILE TO VENDOR FILE
    if [ -f $VENDOR_CONFIG ]; then
      cp -af $CONFIG_FILE $VENDOR_CONFIG
    fi
  fi
  #### ^ INSERT YOUR FILE PATCHES ^ ####
}

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0

  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

if $BOOTMODE && ! is_mounted /magisk; then
  ui_print "   ! Magisk is not activated!... abort"
  exit 1
fi

# Fix SuperSU.....
$BOOTMODE && $BINDIR/sepolicy-inject --live "allow fsck * * *"

# This path should work in any cases
TMPDIR=/dev/tmp

MOUNTPATH=/magisk
IMGNAME=magisk.img

if $BOOTMODE; then
  MOUNTPATH=/dev/magisk_merge
  IMGNAME=magisk_merge.img
fi

mkdir -p $TMPDIR 2>/dev/null
cd $TMPDIR
unzip -o "$ZIP" config.sh

if [ ! -f "config.sh" ]; then
  ui_print "   ! Failed: Unable to extract zip file!"
  exit 1
fi

source config.sh

INSTALLER=$TMPDIR/$MODID
MODPATH=$MOUNTPATH/$MODID
AUDMODLIBPATH=$MOUNTPATH/$AUDMODLIBID

mkdir -p $INSTALLER
cd $INSTALLER
unzip -o "$ZIP" "common/*" module.prop
unzip -o "$ZIP" "system/*"

##########################################################################################
# Main
##########################################################################################

# Print mod name
print_modname

#### MOUNT FILESYSTEMS ####
ui_print "- Mounting filesystems -"

ui_print "   Mounting /cache..."
mount /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
mount -o rw,remount /cache /cache 2>/dev/null
ui_print "   Mounting /data..."
mount /data 2>/dev/null
mount -o rw,remount /data 2>/dev/null
mount -o rw,remount /data /data 2>/dev/null

if [ "$suimg" ]; then
  if [ "$(sys_is_mounted /su)" == 0 ]; then
    ui_print "   Mounting /su...";
    test ! -e /su && mkdir /su;
    mount -t ext4 -o rw,noatime $suimg /su 2>/dev/null
    for i in 0 1 2 3 4 5 6 7; do
      test "$(sys_is_mounted /su)" == 1 && break;
      loop=/dev/block/loop$i;
	  mknod $loop b 7 $i;
	  losetup $loop $suimg;
	  mount -t ext4 -o loop $loop /su; 2>/dev/null
    done;
  fi;
fi;

if [ -f /data/magisk.img ] || [ -d /magisk ]; then
  WRITE=ro
else
  WRITE=rw
fi

ui_print "   Mounting $SYSTEM($WRITE)..."
mount -o $WRITE $SYSTEM 2>/dev/null
mount -o $WRITE,remount $SYSTEM 2>/dev/null
mount -o $WRITE,remount $SYSTEM $SYSTEM 2>/dev/null
ui_print "   Mounting $VENDOR($WRITE)..."
mount -o $WRITE $VENDOR 2>/dev/null
mount -o $WRITE,remount $VENDOR 2>/dev/null
mount -o $WRITE,remount $VENDOR $VENDOR 2>/dev/null

if [ ! -f "$SYSTEM/build.prop" ]; then
  ui_print "   ! Failed: $SYSTEM could not be mounted!"
  exit 1
fi

API=`grep_prop ro.build.version.sdk`
ABI=`grep_prop ro.product.cpu.abi | cut -c-3`
ABI2=`grep_prop ro.product.cpu.abi2 | cut -c-3`
ABILONG=`grep_prop ro.product.cpu.abi`
MIUIVER=`grep_prop ro.miui.ui.version.name`

ARCH=arm
IS64BIT=false
if [ "$ABI" = "x86" ]; then ARCH=x86; fi;
if [ "$ABI2" = "x86" ]; then ARCH=x86; fi;
if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; IS64BIT=true; fi;
if [ "$ABILONG" = "x86_64" ]; then ARCH=x64; IS64BIT=true; fi;

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

if is_mounted /data; then
  IMG=/data/$IMGNAME
  if [ ! -f "/data/magisk.img" ]; then
    ui_print " "
    ui_print "   ! Magisk is not installed!"
    ui_print "    ! Installing on system!"
    # Wipe files
    system_mod_wipe
    # Install
	system_install
    # Create mod paths
    unified_mod_directory
    # Copy files
    unified_mod_copy
    # Patch files
    unified_mod_patch
    #### COMPLETING INSTALL ####
    umount /data
    umount /su
    umount $SYSTEM
    umount $VENDOR
    ui_print " "
    ui_print "    --------- INSTALLATION SUCCESSFUL ---------"
    ui_print " "
    ui_print "Installer brought to you by ahrion @ XDA"
	ui_print " "
	exit 0;
  fi
else
  IMG=/cache/magisk.img
  ui_print " "
  ui_print "***********************************"
  ui_print "*      !! Data unavailible !!     *"
  ui_print "* Magisk detection is impossible  *"
  ui_print "* Installation will still proceed *"
  ui_print "*  But please make sure you have  *"
  ui_print "*        Magisk installed!!       *"
  ui_print "***********************************"
  ui_print " "
fi

request_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "   $IMG detected!"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    SIZE=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "    Resizing $IMG to ${SIZE}M..."
    resize2fs $IMG ${SIZE}M
  fi
else
  SIZE=$((reqSizeM / 32 * 32 + 64));
  ui_print "   Creating $IMG with size ${SIZE}M..."
  make_ext4fs -l ${SIZE}M -a /magisk -S $INSTALLER/common/file_contexts_image $IMG
fi

mount_image $IMG $MOUNTPATH
if ! is_mounted $MOUNTPATH; then
  ui_print "   ! $IMG mount failed... abort"
  exit 1
fi

# Prepare install
magisk_install

# Create mod paths
unified_mod_directory

# Copy files
unified_mod_copy

# Patch files
magisk_audmodlib

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
  mktouch $AUDMODLIBPATH$TARGET/.replace
done

# Auto Mount
if $AUTOMOUNT; then
  mktouch $MODPATH/auto_mount
  mktouch $AUDMODLIBPATH/auto_mount
fi

# prop files
if $PROPFILE; then
  cp -af $INSTALLER/common/system.prop $MODPATH/system.prop
fi

# Module info
cp -af $INSTALLER/module.prop $MODPATH/module.prop
cp -af $INSTALLER/common/audmodlibmodule.prop $AUDMODLIBMODPATH/module.prop
if $BOOTMODE; then
  # Update info for Magisk Manager
  mktouch /magisk/$MODID/update
  mktouch /magisk/$AUDMODLIBID/update
  cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
  cp -af $INSTALLER/common/audmodlibmodule.prop /magisk/$AUDMODLIBID/module.prop
fi

# post-fs-data mode scripts
if $POSTFSDATA; then
  cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh
fi

# service mode scripts
if $LATESTARTSERVICE; then
  cp -af $INSTALLER/common/service.sh $MODPATH/service.sh
  cp -af $INSTALLER/common/audmodlibservice.sh $AUDMODLIBPATH/service.sh
fi

#### COMPLETING INSTALL ####
ui_print " "
ui_print "- Completing install -"

ui_print "   Setting permissions..."
set_permissions

ui_print "   Unmounting partitions..."
umount $MOUNTPATH
losetup -d $LOOPDEVICE
rmdir $MOUNTPATH

# Shrink the image if possible
image_size_check $IMG
NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
  ui_print "   Shrinking $IMG to ${NEWDATASIZE}M..."
  resize2fs $IMG ${NEWDATASIZE}M
fi

if ! $BOOTMODE; then
  umount $SYSTEM
  umount $VENDOR 2>/dev/null
fi

ui_print " "
ui_print "    --------- INSTALLATION SUCCESSFUL ---------"

ui_print " "
ui_print "Installer brought to you by ahrion @ XDA"

# Please leave this message in your flashable zip for credits :)
ui_print " "
ui_print "    *******************************************"
ui_print "    *      Powered by Magisk (@topjohnwu)     *"
ui_print "    *******************************************"
ui_print " "
exit 0
